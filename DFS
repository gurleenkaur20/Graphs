#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class graph
{
    int V;
    list<int> *l;
    
    public:
    
    graph(int v)
    {
        V=v;
        l= new list<int> [V];
    }
    
    void add(int node1, int node2, bool directed= true)
    {
        l[node1].push_back(node2);
        if(directed)
        l[node2].push_back(node1);
    }
    
    void dfshelper(int node, bool visited[])
    {
        visited[node]=true;
        cout<<node<<",";
        //make a dfs call on its unvisited neighbours
        
        for(auto neighbours: l[node])
        {
            if(!visited [neighbours])
            dfshelper(neighbours, visited);
        }
    }
    
    void dfs(int source)
    {
        bool *visited = new bool[V]{0}; //array visited with v element initiated with 0
        dfshelper(source,visited);
    }
    
    
};


int main()
{
    graph g(7);
    g.add(1,2);
    g.add(2,3);
    g.add(3,4);
    g.add(4,5);
    g.add(3,5);
    g.add(5,6);
    g.add(1,0);
    g.add(4,0);
    g.dfs(1);
}
