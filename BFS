
#include <iostream>
#include <bits/stdc++.h>
using namespace std;


class graph{
    int V;
    list<int> *l;
    
    public:
     graph (int v)
     {
         V=v;
         l=new list<int>[V];
     }
     
     void add(int i, int j, bool directed = true)
     {
         l[i].push_back(j);
         if(directed)
         l[j].push_back(i);
     }
     
     void printlist()
    {
      for(int i=0;i<V;i++)
      {
        cout<<i<<"-->";
        
        for (auto data: l[i])
        cout<<data<<",";
        cout<<endl;
      }
    }

void bfs(int source)
{
    queue <int> q;
    bool *visited = new bool [V]{0}; //setting value of visited for every node created to false, so {0}
    
    q.push(source);
    visited[source]=true;
    
    while(!q.empty()){
        // doing work for every node
        
        int f= q.front();
        cout<<f<<",";
        q.pop();
        
        // pushing neighbors of each visited node
        for(auto nbr : l[f])
        {
            if(!visited[nbr])
            {
                q.push(nbr);
                visited[nbr]=true;
            }
        }
    }
}
};

int main()
{
    graph g(7);
    g.add(0,1);
    g.add(1,2);
    g.add(2,3);
    g.add(3,4);
    g.add(3,5);
    g.add(4,5);
    g.add(0,4);
    g.add(5,6);
    g.bfs(1);
  //  cout<<endl;
  // g.printlist();
    return 0;
}
