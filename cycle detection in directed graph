/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class graph
{
    int V;
    list<int> *l;
    
    public:
    
    graph(int v)
    {
        V=v;
        l= new list<int> [V];
    }
    
    void add(int node1, int node2)
    {
        l[node1].push_back(node2);
    }
    
    bool dfs(int node, vector<bool> &visited, vector<bool> &stack)
    {
        visited[node]= true;
        stack[node]=true;
        
        for(auto neighbour: l[node])
        {
            if(stack[neighbour]==true)
            return true;
            
            else if(visited[neighbour]==false)
            {
                bool nbrHasCycle= dfs(neighbour,visited,stack);
                if(nbrHasCycle)
                return true;
            }
        }
        stack[node]=false;
        return false;
    }
    
    bool checkCycle(){
        vector <bool> visited (V, false);
        vector <bool> stack (V, false);
        
        for(int i=0; i<V; i++) // for non connected graphs we have to check for each component of graph
        {
            if(!visited[i])
            {
                if(dfs(i,visited,stack))
                return true;
            }
        }
        return false;
    }
    
};


int main()
{
    graph g(6);
    g.add(0,1);
    g.add(1,2);
    g.add(2,3);
    //g.add(3,0);
    g.add(0,4);
    g.add(0,5);
    g.add(5,4);
    cout<<"\n check cycle in the graph \n 0. no cycle 1. has cycle \n answer :"<<g.checkCycle();
}
